What happens when you initialize a repository? Why do you need to do it?

   git init creates the .git directory and the metadata necessary.

How is the staging area different from the working directory and the repository? What value do you think it offers?

   The staging area in in-between the working directory and the repository.
   It allows having some files untracked.  Not all files should be in the repository, but some of those will still be in the working directory.

How can you use the staging area to make sure you have one commit per logical change?

    Only add the files related to a logical change to the staging area, then commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

     when preparing a new feature while maintaining support for the main (master) branch.

How do the diagrams help you visualize the branch structure?

    Starting with the most current commit, it lists the parents of each commit.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    Merging two branches will combine the commits of both branches starting with their common ancestor. Commits are listed from the most recent followed by its parent, and so on.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    A lot of the merges are really trivial (without conflict), it would be really boring to do every such merge manually.
    Some of the merges are in conflict, so it's better to do those manually.
    The downside is that some of the automatic merge could possibly be wrong, so the best policy there is to review every one to avoid errors.

