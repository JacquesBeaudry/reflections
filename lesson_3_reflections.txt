When would you want to use a remote repository rather than keeping all your work local?
     To share with others.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

      So that I share only completed units with the other developpers.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

      A clone is a complete copy of a repository, including the history. If the
      original repo is on a remote machine, you access it through its url
      (or through ssh). Typical use is to work on a project shared with many
      other developers.

      A fork is a GitHub feature that produces a local clone of another user's
      repository in your GitHub account.  You can then make changes to your
      version of it without modifying the original one. Typical use is to
      make a separate version of a product without modifying the original one.

      A branch is a thread of commits. The default branch of git is called
      "master".  A user can create a branch off master to work on a feature
      with out impeding other feature work or maintenance on the master branch.
      This is local to a repo.  When a repo has been cloned, checking out a
      remote branch will create a local tracking branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

      The first benefit is that it allows working offline.  Git does not require users
      to be allways online. Second benefit is that you can depart from what is the state
      of the remote repo, but still take it into account.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

      We would need some way to share the code and code history. Maybe some database system could help.
      I don't see how it could help not to have git (or some similar version control system).  GitHub is
      convenient, but its value is because it is a de facto standard.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

      When the change is easy and fast, it can be done immediately on master.  In a big project,
      each release will probably have its own branch and changes to each release will be in their
      own sub-branch so they can be reviewed before merging.
